name: 🚀 CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  NODE_VERSION: '18'
  JAVA_VERSION: '17'

jobs:
  # Frontend Tests
  frontend-tests:
    name: 🎨 Frontend Tests
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: 📦 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json
        
    - name: 📥 Install dependencies
      working-directory: ./frontend
      run: npm ci
      
    - name: 🔍 Lint code
      working-directory: ./frontend
      run: npm run lint
      
    - name: 🧪 Run tests
      working-directory: ./frontend
      run: npm test -- --coverage --watchAll=false
      
    - name: 🏗️ Build application
      working-directory: ./frontend
      run: npm run build
      
    - name: 📊 Upload coverage reports
      uses: codecov/codecov-action@v3
      with:
        file: ./frontend/coverage/lcov.info
        flags: frontend

  # Backend Tests
  backend-tests:
    name: ⚙️ Backend Tests
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:16
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: testdb
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: ☕ Setup Java
      uses: actions/setup-java@v4
      with:
        java-version: ${{ env.JAVA_VERSION }}
        distribution: 'temurin'
        
    - name: 📥 Cache Maven dependencies
      uses: actions/cache@v3
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2
        
    - name: 🧪 Run tests
      working-directory: ./backend
      run: mvn test
      
    - name: 📊 Generate test report
      working-directory: ./backend
      run: mvn jacoco:report
      
    - name: 🏗️ Build application
      working-directory: ./backend
      run: mvn clean package -DskipTests

  # Docker Build
  docker-build:
    name: 🐳 Docker Build
    runs-on: ubuntu-latest
    needs: [frontend-tests, backend-tests]
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: 🐳 Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: 🏗️ Build frontend image
      uses: docker/build-push-action@v5
      with:
        context: ./frontend
        file: ./frontend/Dockerfile
        push: false
        tags: personalbudget-frontend:latest
        cache-from: type=gha
        cache-to: type=gha,mode=max
        
    - name: 🏗️ Build backend image
      uses: docker/build-push-action@v5
      with:
        context: ./backend
        file: ./backend/Dockerfile
        push: false
        tags: personalbudget-backend:latest
        cache-from: type=gha
        cache-to: type=gha,mode=max

  # Security Scan
  security-scan:
    name: 🔒 Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: 🔍 Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
        
    - name: 📊 Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  # Deploy to Staging (on develop branch)
  deploy-staging:
    name: 🚀 Deploy to Staging
    runs-on: ubuntu-latest
    needs: [frontend-tests, backend-tests, docker-build]
    if: github.ref == 'refs/heads/develop'
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: 🚀 Deploy to staging
      run: |
        echo "Deploying to staging environment..."
        # Add your staging deployment commands here

  # Deploy to Production (on main branch)
  deploy-production:
    name: 🌟 Deploy to Production
    runs-on: ubuntu-latest
    needs: [frontend-tests, backend-tests, docker-build, security-scan]
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: 🚀 Deploy to production
      run: |
        echo "Deploying to production environment..."
        # Add your production deployment commands here

  # Notify on Success/Failure
  notify:
    name: 📢 Notify
    runs-on: ubuntu-latest
    needs: [frontend-tests, backend-tests, docker-build]
    if: always()
    
    steps:
    - name: ✅ Success notification
      if: needs.frontend-tests.result == 'success' && needs.backend-tests.result == 'success'
      run: |
        echo "✅ All tests passed successfully!"
        
    - name: ❌ Failure notification
      if: needs.frontend-tests.result == 'failure' || needs.backend-tests.result == 'failure'
      run: |
        echo "❌ Some tests failed. Please check the logs."
